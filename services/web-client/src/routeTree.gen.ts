/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LoggedInLayoutRouteImport } from './routes/_loggedInLayout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LoggedInLayoutServerIdIndexRouteImport } from './routes/_loggedInLayout/$serverId/index'
import { Route as LoggedInLayoutServerIdSearchRouteImport } from './routes/_loggedInLayout/$serverId/search'
import { Route as LoggedInLayoutServerIdMoviesRouteImport } from './routes/_loggedInLayout/$serverId/movies'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LoggedInLayoutRoute = LoggedInLayoutRouteImport.update({
  id: '/_loggedInLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoggedInLayoutServerIdIndexRoute =
  LoggedInLayoutServerIdIndexRouteImport.update({
    id: '/$serverId/',
    path: '/$serverId/',
    getParentRoute: () => LoggedInLayoutRoute,
  } as any)
const LoggedInLayoutServerIdSearchRoute =
  LoggedInLayoutServerIdSearchRouteImport.update({
    id: '/$serverId/search',
    path: '/$serverId/search',
    getParentRoute: () => LoggedInLayoutRoute,
  } as any)
const LoggedInLayoutServerIdMoviesRoute =
  LoggedInLayoutServerIdMoviesRouteImport.update({
    id: '/$serverId/movies',
    path: '/$serverId/movies',
    getParentRoute: () => LoggedInLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/$serverId/movies': typeof LoggedInLayoutServerIdMoviesRoute
  '/$serverId/search': typeof LoggedInLayoutServerIdSearchRoute
  '/$serverId': typeof LoggedInLayoutServerIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/$serverId/movies': typeof LoggedInLayoutServerIdMoviesRoute
  '/$serverId/search': typeof LoggedInLayoutServerIdSearchRoute
  '/$serverId': typeof LoggedInLayoutServerIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_loggedInLayout': typeof LoggedInLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_loggedInLayout/$serverId/movies': typeof LoggedInLayoutServerIdMoviesRoute
  '/_loggedInLayout/$serverId/search': typeof LoggedInLayoutServerIdSearchRoute
  '/_loggedInLayout/$serverId/': typeof LoggedInLayoutServerIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/$serverId/movies'
    | '/$serverId/search'
    | '/$serverId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/$serverId/movies' | '/$serverId/search' | '/$serverId'
  id:
    | '__root__'
    | '/'
    | '/_loggedInLayout'
    | '/login'
    | '/_loggedInLayout/$serverId/movies'
    | '/_loggedInLayout/$serverId/search'
    | '/_loggedInLayout/$serverId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoggedInLayoutRoute: typeof LoggedInLayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_loggedInLayout': {
      id: '/_loggedInLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LoggedInLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_loggedInLayout/$serverId/': {
      id: '/_loggedInLayout/$serverId/'
      path: '/$serverId'
      fullPath: '/$serverId'
      preLoaderRoute: typeof LoggedInLayoutServerIdIndexRouteImport
      parentRoute: typeof LoggedInLayoutRoute
    }
    '/_loggedInLayout/$serverId/search': {
      id: '/_loggedInLayout/$serverId/search'
      path: '/$serverId/search'
      fullPath: '/$serverId/search'
      preLoaderRoute: typeof LoggedInLayoutServerIdSearchRouteImport
      parentRoute: typeof LoggedInLayoutRoute
    }
    '/_loggedInLayout/$serverId/movies': {
      id: '/_loggedInLayout/$serverId/movies'
      path: '/$serverId/movies'
      fullPath: '/$serverId/movies'
      preLoaderRoute: typeof LoggedInLayoutServerIdMoviesRouteImport
      parentRoute: typeof LoggedInLayoutRoute
    }
  }
}

interface LoggedInLayoutRouteChildren {
  LoggedInLayoutServerIdMoviesRoute: typeof LoggedInLayoutServerIdMoviesRoute
  LoggedInLayoutServerIdSearchRoute: typeof LoggedInLayoutServerIdSearchRoute
  LoggedInLayoutServerIdIndexRoute: typeof LoggedInLayoutServerIdIndexRoute
}

const LoggedInLayoutRouteChildren: LoggedInLayoutRouteChildren = {
  LoggedInLayoutServerIdMoviesRoute: LoggedInLayoutServerIdMoviesRoute,
  LoggedInLayoutServerIdSearchRoute: LoggedInLayoutServerIdSearchRoute,
  LoggedInLayoutServerIdIndexRoute: LoggedInLayoutServerIdIndexRoute,
}

const LoggedInLayoutRouteWithChildren = LoggedInLayoutRoute._addFileChildren(
  LoggedInLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoggedInLayoutRoute: LoggedInLayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
